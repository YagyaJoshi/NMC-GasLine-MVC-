@model NMCPipedGasLineAPI.Models.User


@{
    /**/

    ViewBag.Title = "Create User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@*<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>*@


@*<h2>@ViewBag.Title.</h2>*@



@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <h4>Employee Master</h4>




    @*@Html.ValidationSummary("", new { @class = "text-danger" })*@
    @*if (ViewBag.Error != "")
        {

            <div style="color:red;">

                @(ViewBag.Error != null ? ViewBag.Error.ToString() : "")
            </div>

        }*@
    <hr />
    <div class="form-row">
        <div class="form-group col-md-6">
            @*@MaxLength = "50"  , @MaxLength = "50" *@
            <label for="inputName">Name <i class="text-danger">*</i></label>
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @placeholder = "Name" })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger", @placeholder = "Name" })
            @Html.HiddenFor(m => m.Id)

        </div>
        <div class="form-group col-md-6">
            <label for="inputCountry">Country <i class="text-danger">*</i></label>
            @Html.DropDownListFor(model => model.CountryId,
                new SelectList(Model.Country, "CountryId", "CountryName"), "Please Select Country", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputStateName">State <i class="text-danger">*</i></label>
            @Html.DropDownListFor(m => m.StateId, new SelectList(Model.State, "StateId", "StateName"), "Please Select State", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-6">
            <label for="inputCityName">City <i class="text-danger">*</i></label>
            @Html.DropDownListFor(m => m.CityId, new SelectList(Model.City, "CityId", "CityName"), "Please select City", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputCompany">Company <i class="text-danger">*</i></label>
            @Html.DropDownListFor(m => m.CompanyId, new SelectList(Model.Company, "Id", "CompanyName"), "Please select Company", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-6">
            <label for="inputArea">Area <i class="text-danger">*</i></label>
            @Html.DropDownListFor(m => m.AreaId, new SelectList(Model.Area, "AreaId", "AreaName"), "Please select Area", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.AreaId, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-row">
            <div class="form-group col-md-6">
                <label for="inputCompany">Company</label>
                @Html.DropDownListFor(m => m.CompanyId, new SelectList(Model.Company, "Id", "CompanyName"), "Please select Company", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CompanyId)

            </div>
            <div class="form-group col-md-6">
                <label for="inputArea">Area</label>
                @Html.DropDownListFor(m => m.AreaId, new SelectList(Model.Area, "AreaId", "AreaName"), "Please select Area", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AreaId)
            </div>
        </div>*@


    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputPincode">Pincode</label>
            @Html.TextBoxFor(m => m.Pincode, new { @class = "form-control", @placeholder = "Pincode", @MinimumLength = "6", @MaxLength = "6", onkeypress = "return isNumberKey(event)" })
            @*@Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })*@
        </div>
        <div class="form-group col-md-6">
            <label for="inputPhone">Phone</label>
            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", @placeholder = "Phone", @MaxLength = "10", onkeypress = "return isNumberKey(event)" })
            @*@Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })*@
        </div>
    </div>


    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputPincode">Email <i class="text-danger">*</i></label>
            @if (Model.Id == null)
            {
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = "Email" })
            }
            else
            {
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = "Email", @readonly = "readonly" })
                @Html.HiddenFor(m => m.Email)
            }

            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            @if (ViewBag.Email != "")
            {
            <span class="text-danger"> @(ViewBag.Email != null ? ViewBag.Email.ToString() : "")</span>


            }

        </div>
        <div class="form-group col-md-6">

            @if (Model.Id == null)
            {<label for="inputPhone">Password <i class="text-danger">*</i></label>
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", @id = "PasswordNew", @placeholder = "Password" })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })

                if (ViewBag.Error != "")
                {
                    if (ViewBag.error == "Please Enter Password.")
                    { <p style="color:red;">

                            @(ViewBag.Error != null ? ViewBag.Error.ToString() : "")
                        </p> }
                }
            }
            else
            {
                <label for="inputPhone">Password</label>
                @Html.PasswordFor(m => m.UpdatePassword, new { @class = "form-control", @placeholder = "Password" })
                @Html.ValidationMessageFor(model => model.UpdatePassword, "", new { @class = "text-danger" })
            }
            @Html.HiddenFor(m => m.Password)
            @Html.HiddenFor(m => m.UserId)
        </div>
    </div>


    <div>
        <div class="form-group">
            <label for="inputAddress">Address</label>
            @Html.TextAreaFor(m => m.Address, new { @class = "form-control", @placeholder = "Address", @MaxLength = "100" })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-row">
            <div class="form-group col-md-6">

                @if (Session["RoleName"].ToString() == "Super Admin")
                {

                    <label for="inputCountry">Role <i class="text-danger">*</i></label>
                    @Html.DropDownListFor(model => model.RoleId,
                    new SelectList(Model.Role, "Id", "Name"), "Please Select Role", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })


                }
                else
                {
                    @Html.HiddenFor(m => m.RoleId)

                }

                @Html.HiddenFor(m => m.oldRoleName)
                @Html.HiddenFor(m => m.RoleName)
            </div>


                <div class="form-group col-md-6">
                    <label for="inputEmpCode">EmpCode </label>
                    @Html.TextBoxFor(model =>model.EmpCode, new { @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.EmpCode, "", new
                    { @class = "text-danger" })
                 
                </div>
        </div>



    <div class="form-group">
        <div class="col-md-12 d-flex justify-content-end px-0">
            <a href='@Url.Action("List", "Employee")' class="mr-2 btn btn-dark">Cancel</a>
            <input type="submit" class="btn btn-dark-success" value="Save" />
        </div>
    </div>

    if (ViewBag.Error != "")
    {
        if (ViewBag.error != "Please Enter Password.")
        { <div style="color:red;">

                @(ViewBag.Error != null ? ViewBag.Error.ToString() : "")
            </div>  }


    }
}



<script type="text/javascript">

    window.onload = window.history.forward(0);
    $(document).on('invalid-form.validate', 'form', function () {
        var button = $(this).find('input[type="submit"], button[type="submit"]');
        setTimeout(function () {
            button.removeAttr('disabled');
        }, 1);
    });
    $(document).on('submit', 'form', function () {
        var button = $(this).find('input[type="submit"], button[type="submit"]');
        setTimeout(function () {
            button.attr('disabled', 'disabled');
        }, 0);
    });


    $(function () {



        $("select").each(function () {
            if ($(this).find("option").length <= 1) {
                $(this).attr("disabled", "disabled");
            }
        });

        $("select").change(function () {

            var value = 0;
            if ($(this).val() != "") {
                value = $(this).val();
            }
            var id = $(this).attr("id");

            $.ajax({
                type: "POST",
                url: '@Url.Action("MasterData", "Home")',
                data: '{type: "' + id + '", value: "' + value + '"}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {

                    var dropDownId;
                    var list;
                    switch (id) {
                        case "CountryId":
                            list = response.State;

                            DisableDropDown("#StateId");
                            DisableDropDown("#CityId");
                            PopulateDropDown("#StateId", list);
                            break;
                        case "StateId":
                            dropDownId ="#CityId";
                            list = response.City;
                            DisableDropDown("#CityId");
                            DisableDropDown("#AreaId");
                            PopulateDropDown("#CityId", list);
                            break;
                        case "CityId":
                            dropDownId ="#CompanyId";
                            list = response.Company;
                            DisableDropDown("#CompanyId");
                            PopulateDropDown("#CompanyId", list);
                            break;
                        case "CompanyId":
                            dropDownId = "#AreaId";
                            list = response.Area;
                            DisableDropDown("#AreaId");
                            PopulateDropDown("#AreaId", list);
                            break;

                    }

                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    function DisableDropDown(dropDownId) {
        $(dropDownId).attr("disabled", "disabled");
        $(dropDownId).empty().append('<option selected="selected" value="">Please select</option>');
    }

    function PopulateDropDown(dropDownId, list) {
        if (list != null && list.length > 0) {
            $(dropDownId).removeAttr("disabled");
            $.each(list, function () {
                $(dropDownId).append($("<option></option>").val(this['Value']).html(this['Text']));
            });
        }
    }

    $(function () {
        if ($("#CountryId").val() != "" && $("#StateId").val() != "" && $("#CityId").val() != "" && $("#AreaId").val() != "" && $("CompanyId").val() !="") {
            var message = "Country: " + $("#CountryId option:selected").text();
            message += "\nState: " + $("#StateId option:selected").text();
            message += "\nCity: " + $("#CityId option:selected").text();
            message += "\nCompany: " + $("#CompanyId option:selected").text();
            message += "\nArea: " + $("#AreaId option:selected").text();

            //alert(message);
        }
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
</script>
@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
