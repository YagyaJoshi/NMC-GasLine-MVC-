@model NMCPipedGasLineAPI.Models.CompanyMaster

@{

    Layout = "~/Views/Shared/_Layout.cshtml";
}



@*<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>*@
<script type="text/javascript">
    window.onload = window.history.forward(0);
    $(document).on('invalid-form.validate', 'form', function () {
        var button = $(this).find('input[type="submit"], button[type="submit"]');
        setTimeout(function () {
            button.removeAttr('disabled');
        }, 1);
    });
    $(document).on('submit', 'form', function () {
        var button = $(this).find('input[type="submit"], button[type="submit"]');
        setTimeout(function () {
            button.attr('disabled', 'disabled');
        }, 0);
    });
    $(function () {
        $("select").each(function () {
            if ($(this).find("option").length <= 1) {
                $(this).attr("disabled", "disabled");
            }
        });

        $("select").change(function () {

            var value = 0;
            if ($(this).val() != "") {
                value = $(this).val();
            }
           var id = $(this).attr("id");
           $.ajax({
                type: "POST",
                url: '@Url.Action("MasterData", "Home")',
                data: '{type: "' + id + '", value: "' + value + '"}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                  var dropDownId;
                    var list;
                    switch (id) {

                        case "CountryId":
                            list = response.State;
                             DisableDropDown("#StateId");
                            DisableDropDown("#CityId");
                            PopulateDropDown("#StateId", list);
                            break;
                        case "StateId":
                            dropDownId ="#CityId";
                            list = response.City;
                            DisableDropDown("#CityId");
                            DisableDropDown("#AreaId");
                            PopulateDropDown("#CityId", list);
                            break;


                    }

                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    function DisableDropDown(dropDownId) {
        $(dropDownId).attr("disabled", "disabled");
        $(dropDownId).empty().append('<option selected="selected" value="">Please select</option>');
    }

    function PopulateDropDown(dropDownId, list) {
        if (list != null && list.length > 0) {
            $(dropDownId).removeAttr("disabled");
            $.each(list, function () {
                $(dropDownId).append($("<option></option>").val(this['Value']).html(this['Text']));
            });
        }
    }

    $(function () {
        if ($("#CountryId").val() != "" && $("#StateId").val() != "" && $("#CityId").val() != "") {
            var message = "Country: " + $("#CountryId option:selected").text();
            message += "\nState: " + $("#StateId option:selected").text();
            message += "\nCity: " + $("#CityId option:selected").text();

        }
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
</script>



@using (Html.BeginForm("Index", "Company", FormMethod.Post))
{


    @*<form>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" placeholder="First name">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Last name">
                </div>
            </div>
        </form>*@





<div class="form-horizontal">
    <h4>Company Master</h4>

    <hr />

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @if (ViewBag.Error != null)
    {
        <div style="color:red;">

            @(ViewBag.Error != null ? ViewBag.Error.ToString() : "")
        </div>
     }


    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputCompanyName">Company Name <i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control", @placeholder = "Company Name", @MaxLength = "50", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.CompanyName)
        </div>
        <div class="form-group col-md-6">
            <label for="inputCountry">Country <i class="text-danger">*</i></label>
            @Html.DropDownListFor(model => model.CountryId,
       new SelectList(Model.Country, "CountryId", "CountryName"), "Please Select Country", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputStateName">State <i class="text-danger">*</i></label>
            @Html.DropDownListFor(m => m.StateId, new SelectList(Model.State, "StateId", "StateName"), "Please select State", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })

        </div>
        <div class="form-group col-md-6">
            <label for="inputCityName">City <i class="text-danger">*</i></label>
            @Html.DropDownListFor(m => m.CityId, new SelectList(Model.City, "CityId", "CityName"), "Please select City", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputInstallationCharges">Installation Charges (Rs) <i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.InstallationCharges, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Installation Charges" })

            @Html.ValidationMessageFor(model => model.InstallationCharges, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            <label for="inputLatePaymentFee">Late Payment Fee (Rs)<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.LatePaymentFee, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Late Payment Fee" })
            @Html.ValidationMessageFor(model => model.LatePaymentFee, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputMinimumGasCharges">Delay Days<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.DelayDays, new { @MaxLength = "3", onkeypress = "return isNumberKey(event)", @class = "form-control", @placeholder = "Delay Days" })
            @Html.ValidationMessageFor(model => model.DelayDays, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            @*<label for="inputReConnectionFee">Delay Days Limit</label>
                @Html.TextBoxFor(model => model.DelayDaysLimit, new { @class = "form-control", @MaxLength = "3", onkeypress = "return isNumberKey(event)" })*@
            <label for="inputMinimumGasCharges">Delay Min Amount (Rs)<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.DelayMinAmount, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Delay Min Amount (Rs)" })
            @Html.ValidationMessageFor(model => model.DelayMinAmount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputReConnectionFee">Due Days<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.DueDays, new { @class = "form-control", @MaxLength = "3", onkeypress = "return isNumberKey(event)"  ,@placeholder = "Due Days" })
            @Html.ValidationMessageFor(model => model.DueDays, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            <label for="inputReConnectionFee">Call Charges (Rs)<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.CallCharges, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Call Charges" })
            @Html.ValidationMessageFor(model => model.CallCharges, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputMinimumGasCharges">Details Changes Fee (Rs)<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.DetailsChangesFee, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Details Changes Fee (Rs)" })
            @Html.ValidationMessageFor(model => model.DetailsChangesFee, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            <label for="inputReConnectionFee">Connection Fee (Rs)<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.ConnectionFee, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Connection Fee" })
            @Html.ValidationMessageFor(model => model.ConnectionFee, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="inputReConnectionFee">Re Connection Fee (Rs)<i class="text-danger">*</i></label>
            @Html.TextBoxFor(model => model.ReConnectionFee, new { @class = "form-control", onkeypress = "return isNumberKey(event)", @placeholder = "Re Connection Fee" })
            @Html.ValidationMessageFor(model => model.ReConnectionFee, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-md-6">
            <label for="inputReConnectionFee">Minimum Gas Charges(Rs)<i class="text-danger"></i></label>
            @Html.TextBoxFor(model => model.MinimumGasCharges, new { @class = "form-control", @placeholder = "Minimum Gas Charges" })
            @Html.ValidationMessageFor(model => model.MinimumGasCharges, "", new { @class = "text-danger" })

        </div>

    </div>


    <div class="form-row">
        <div class="form-group col-md-12">

            <label for="inputAddress">Address</label>
            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @placeholder = "Address", @MaxLength = "100" })
              </div>

        </div>

        <div class="form-group">
            <div class="col-md-12 d-flex justify-content-end px-0">
                <a href='@Url.Action("List", "Company")' class="mr-2 btn btn-dark">Cancel</a>

                @if (Session["RoleName"].ToString() == "Super Admin")
                {
                    <input type="submit" value="Save" class="btn btn-dark-success" />
                }
            </div>
        </div>



    </div>
}

@*<div>
        @Html.ActionLink("Back to List", "List")
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
