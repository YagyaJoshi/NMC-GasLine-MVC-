@model NMCPipedGasLineAPI.Models.ChangePwd
@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/CustLayout.cshtml";
}


<div class="container">
    <h2>Change Password</h2>
    <div class="auth-form" style="text-align: -webkit-center">




        @using (Html.BeginForm("ChangesPassword", "Payment", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "ChangesPassword" }))
        {
            @Html.AntiForgeryToken()
            if (TempData["MessageFailed"] != null && TempData["MessageFailed"] != "")
            {
                <div id="lbl" class="alert alert-danger">
                    @TempData["MessageFailed"]
                </div>
            }
            <hr />
            <div class="form-group col-md-6">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "New Password", @MaximumLength = 50 })
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @placeholder = "New Confirm Password" })
                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
            <br />
            @Html.HiddenFor(m => m.Id)
            <div class="form-group col-md-6">
                <button type="submit" class="btn btn-primary btn-block">Change Password</button>
               </div>

                }

            </div>
        </div>




@*@using (Html.BeginForm("ChangesPassword", "Payment", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "ChangesPassword" }))
    {
        <h4>Changes Password</h4>

        <hr />


        <div class="form-group">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = "New Password", @MaximumLength = 50 })
            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @placeholder = "New Confirm Password" })
            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
        </div>
        <br />
        @Html.HiddenFor(m => m.Id)
        <button type="submit" class="btn btn-primary btn-block">Change Password</button>


        if (TempData["MessageFailed"] != null && TempData["MessageFailed"] != "")
        {
            <div id="lbl" class="alert alert-danger">
                @TempData["MessageFailed"]
            </div>
        }




    }*@



<style>
   
    .field-validation-error {
        float: left;
    }
</style>